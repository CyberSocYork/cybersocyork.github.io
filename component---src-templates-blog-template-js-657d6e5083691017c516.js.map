{"version":3,"sources":["webpack://cybersocyork.github.io/./src/components/Button.js","webpack://cybersocyork.github.io/./src/templates/blogTemplate.js"],"names":["StyledButton","styled","Link","color","Button","to","children","className","test","as","href","target","rel","Title","Detail","Date","Content","BackButton","Template","markdownRemark","data","frontmatter","html","title","isLocal","author","date","dangerouslySetInnerHTML","__html"],"mappings":"8KAOMA,GAAeC,QAAOC,MAAV,0EAAGD,CAAH,iXAqBLE,aAKPC,EAAS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAI9B,MAFmB,YAAYC,KAAKH,GAIhC,gBAACL,EAAD,CAAcK,GAAIA,EAAIE,UAAWA,GAC9BD,GAML,gBAACN,EAAD,CAAcS,GAAG,IAAIC,KAAML,EAAIM,OAAO,SAASC,IAAI,sBAAsBL,UAAWA,GACjFD,KAKoBL,QAAOG,GAAV,yEAAGH,CAAH,wBAUxB,O,iICpDMY,EAAQZ,mBAAH,8DAAGA,CAAH,2BAILa,EAASb,mBAAH,+DAAGA,CAAH,uCAKNc,EAAOd,qBAAH,6DAAGA,CAAH,wCACCE,YAILa,EAAUf,oBAAH,gEAAGA,CAAH,2CAKPgB,GAAahB,QAAOG,KAAV,8EAAGH,CAAH,6CAKD,SAASiB,EAAT,GAEX,IACMC,EADP,EADDC,KAEQD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACE,gBAAC,IAAD,CAAQC,MAAK,UAAYF,EAAYE,OACnC,uBAAKhB,UAAU,uBACb,uBAAKA,UAAU,YACb,uBAAKA,UAAU,OACb,gBAACU,EAAD,CAAYZ,GAAG,QAAQmB,SAAS,GAAhC,QAGA,gBAACX,EAAD,KAAQQ,EAAYE,OACpB,gBAACT,EAAD,KACE,4BAAOO,EAAYI,QADrB,MACsC,gBAACV,EAAD,KAAOM,EAAYK,OAEzD,gBAACV,EAAD,CAASW,wBAAyB,CAAEC,OAAQN","file":"component---src-templates-blog-template-js-657d6e5083691017c516.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { color } from \"@theme/config\";\n\nconst StyledButton = styled(Link)`\n  background-image: linear-gradient(\n    90deg,\n    rgba(0, 0, 0, 0) 0%,\n    rgba(0, 0, 0, 0) 50%,\n    white 50%,\n    white 50%\n  );\n\n  background-size: 200%;\n\n  border: 5px solid white;\n  display: inline-block;\n  font-weight: 700;\n  margin: 0;\n  padding: 0.5em 1.2em;\n  text-align: center;\n  text-decoration: none !important;\n  transition: ease background-position 0.3s, ease all 0.175s;\n\n  &:hover {\n    color: ${color.primary};\n    background-position: -100% 100%;\n  }\n`;\n\nconst Button = ({ to, children, className }) => {\n  // Test whether the link is internal (i.e. starts with a slash).\n  const isInternal = /^\\/(?!\\/)/.test(to);\n\n  if (isInternal) {\n    return (\n      <StyledButton to={to} className={className}>\n        {children}\n      </StyledButton>\n    );\n  }\n\n  return (\n    <StyledButton as=\"a\" href={to} target=\"_blank\" rel=\"noopener noreferrer\" className={className}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport const SmallButton = styled(Button)`\n  padding: 0.3em 1em;\n`;\n\nButton.propTypes = {\n  className: PropTypes.string,\n  to: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Button;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport Button from \"@components/Button\";\nimport Layout from \"@components/Layout\";\n\nimport { color } from \"@theme/config\";\n\nconst Title = styled.h1`\n  margin-bottom: 0.5rem;\n`;\n\nconst Detail = styled.h2`\n  font-size: 0.8rem;\n  font-weight: 300;\n`;\n\nconst Date = styled.span`\n  color: ${color.accent};\n  text-transform: uppercase;\n`;\n\nconst Content = styled.div`\n  text-align: left;\n  text-align-last: left;\n`;\n\nconst BackButton = styled(Button)`\n  margin-bottom: 1em;\n  padding: 0.25em 0.5em;\n`;\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data; // data.markdownRemark holds the post data\n  const { frontmatter, html } = markdownRemark; // frontmatter is all the meta-content in the blog post, html is the actual content\n  return (\n    <Layout title={`Blog / ${frontmatter.title}`}>\n      <div className=\"blog-post container\">\n        <div className=\"row my-5\">\n          <div className=\"col\">\n            <BackButton to=\"/blog\" isLocal={true}>\n              Back\n            </BackButton>\n            <Title>{frontmatter.title}</Title>\n            <Detail>\n              <span>{frontmatter.author}</span> - <Date>{frontmatter.date}</Date>\n            </Detail>\n            <Content dangerouslySetInnerHTML={{ __html: html }} />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nTemplate.propTypes = {\n  data: PropTypes.object,\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        author\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}